StartESX=function(a)ESX=exports["es_extended"]:getSharedObject()end;StartQB=function(a)QBCore=exports['qb-core']:GetCoreObject()end;ShowNotification=function(b,c,type)if GetResourceState("qb-core")=="started"then TriggerClientEvent('QBCore:Notify',b,c,type)elseif GetResourceState("es_extended")=="started"then TriggerClientEvent('esx:showNotification',b,c)end end;CreateLoop=function(d,e)Citizen.CreateThread(function()local f=true;_break=function()f=false end;while f do d()Citizen.Wait(e or 5)end end)end;AddItem=function(b,...)if ESX then xPlayer=ESX.GetPlayerFromId(b)xPlayer.addInventoryItem(...)else xPlayer=QBCore.Functions.GetPlayer(b)xPlayer.Functions.AddItem(...)end end;RemoveItem=function(b,...)if ESX then xPlayer=ESX.GetPlayerFromId(b)xPlayer.removeInventoryItem(...)else xPlayer=QBCore.Functions.GetPlayer(b)xPlayer.Functions.RemoveItem(...)end end;GetItem=function(b,...)if ESX then xPlayer=ESX.GetPlayerFromId(b)return xPlayer.getInventoryItem(...)else xPlayer=QBCore.Functions.GetPlayer(b)return xPlayer.Functions.GetItemByName(...)end end;HaveItem=function(b,...)if ESX then return GetItem(b,...).count>0 else return GetItem(b,...).amount>0 end end;HaveItemQuantity=function(b,g,h)if ESX then return GetItem(b,g).count>h else return GetItem(b,g).amount>h end end;AddMoney=function(b,type,...)if ESX then xPlayer=ESX.GetPlayerFromId(b)if type=="cash"then xPlayer.addMoney(...)else xPlayer.addAccountMoney(type,...)end else xPlayer=QBCore.Functions.GetPlayer(b)xPlayer.Functions.AddMoney(type,...)end end;RemoveMoney=function(b,type,...)if ESX then xPlayer=ESX.GetPlayerFromId(b)if type=="cash"then xPlayer.removeMoney(...)else xPlayer.removeAccountMoney(type,...)end else xPlayer=QBCore.Functions.GetPlayer(b)xPlayer.Functions.RemoveMoney(type,...)end end;HaveMoney=function(b,type,i)if ESX then xPlayer=ESX.GetPlayerFromId(b)if type=="cash"then return xPlayer.getMoney(type)>=i else return xPlayer.getAccount(type).money>=i end else xPlayer=QBCore.Functions.GetPlayer(b)return xPlayer.Functions.GetMoney(type)>=i end end;StartMySQL=function()MySQL={Async={},Sync={}}local function j(k)if nil==k then return{['']=''}end;assert(type(k)=="table","A table is expected")if next(k)==nil then return{['']=''}end;return k end;function MySQL.Sync.execute(l,k)assert(type(l)=="string"or type(l)=="number","The SQL Query must be a string")local m=0;local n=false;exports['mysql-async']:mysql_execute(l,j(k),function(o)m=o;n=true end)repeat Citizen.Wait(0)until n==true;return m end;function MySQL.Sync.fetchAll(l,k)assert(type(l)=="string"or type(l)=="number","The SQL Query must be a string")local m={}local n=false;exports['mysql-async']:mysql_fetch_all(l,j(k),function(o)m=o;n=true end)repeat Citizen.Wait(0)until n==true;return m end;function MySQL.Sync.fetchScalar(l,k)assert(type(l)=="string"or type(l)=="number","The SQL Query must be a string")local m=''local n=false;exports['mysql-async']:mysql_fetch_scalar(l,j(k),function(o)m=o;n=true end)repeat Citizen.Wait(0)until n==true;return m end;function MySQL.Sync.insert(l,k)assert(type(l)=="string"or type(l)=="number","The SQL Query must be a string")local m=0;local n=false;exports['mysql-async']:mysql_insert(l,j(k),function(o)m=o;n=true end)repeat Citizen.Wait(0)until n==true;return m end;function MySQL.Sync.store(l)assert(type(l)=="string","The SQL Query must be a string")local m=-1;local n=false;exports['mysql-async']:mysql_store(l,function(o)m=o;n=true end)repeat Citizen.Wait(0)until n==true;return m end;function MySQL.Sync.transaction(p,k)local m=0;local n=false;exports['mysql-async']:mysql_transaction(p,k,function(o)m=o;n=true end)repeat Citizen.Wait(0)until n==true;return m end;function MySQL.Async.execute(l,k,q)assert(type(l)=="string"or type(l)=="number","The SQL Query must be a string")exports['mysql-async']:mysql_execute(l,j(k),q)end;function MySQL.Async.fetchAll(l,k,q)assert(type(l)=="string"or type(l)=="number","The SQL Query must be a string")exports['mysql-async']:mysql_fetch_all(l,j(k),q)end;function MySQL.Async.fetchScalar(l,k,q)assert(type(l)=="string"or type(l)=="number","The SQL Query must be a string")exports['mysql-async']:mysql_fetch_scalar(l,j(k),q)end;function MySQL.Async.insert(l,k,q)assert(type(l)=="string"or type(l)=="number","The SQL Query must be a string")exports['mysql-async']:mysql_insert(l,j(k),q)end;function MySQL.Async.store(l,q)assert(type(l)=="string","The SQL Query must be a string")exports['mysql-async']:mysql_store(l,q)end;function MySQL.Async.transaction(p,k,q)return exports['mysql-async']:mysql_transaction(p,k,q)end;function MySQL.ready(r)Citizen.CreateThread(function()while GetResourceState('mysql-async')~='started'do Citizen.Wait(0)end;while not exports['mysql-async']:is_ready()do Citizen.Wait(0)end;r()end)end end;ExecuteSql=function(l,k)if MySQL==nil then StartMySQL()end;if string.find(l,"SELECT")then return MySQL.Sync.fetchAll(l,k)elseif string.find(l,"INSERT")or string.find(l,"UPDATE")then MySQL.Sync.execute(l,k)end end;SocietyAddItem=function(s,g,i)if not string.find(s,"society_")then s="society_"..s end;TriggerEvent('esx_addoninventory:getSharedInventory',s,function(t)t.addItem(g,i)end)end;SocietyRemoveItem=function(s,g,i)if not string.find(s,"society_")then s="society_"..s end;TriggerEvent('esx_addoninventory:getSharedInventory',s,function(t)t.removeItem(g,i)end)end;SocietyGetItem=function(s,g)if not string.find(s,"society_")then s="society_"..s end;local u=nil;TriggerEvent('esx_addoninventory:getSharedInventory',s,function(t)u=t.getItem(g)end)while u==nil do Citizen.Wait(1)end;return u end;SocietyHaveItem=function(s,g)if not string.find(s,"society_")then s="society_"..s end;local u=nil;TriggerEvent('esx_addoninventory:getSharedInventory',s,function(t)local v=t.getItem(g).count;u=v>0 end)while u==nil do Citizen.Wait(1)end;return u end;SocietyHaveItemQuantity=function(s,g,h)if not string.find(s,"society_")then s="society_"..s end;local u=nil;TriggerEvent('esx_addoninventory:getSharedInventory',s,function(t)local v=t.getItem(g).count;u=v>h end)while u==nil do Citizen.Wait(1)end;return u end;SocietyAddMoney=function(s,i)if not string.find(s,"society_")then s="society_"..s end;TriggerEvent('esx_addonaccount:getSharedAccount',s,function(w)w.addMoney(i)end)end;SocietyRemoveMoney=function(s,i)if not string.find(s,"society_")then s="society_"..s end;TriggerEvent('esx_addonaccount:getSharedAccount',s,function(w)w.removeMoney(i)end)end;SocietyHaveMoney=function(s,i)if not string.find(s,"society_")then s="society_"..s end;local x=nil;TriggerEvent('esx_addonaccount:getSharedAccount',s,function(w)x=w.money>=i end)while x==nil do Citizen.Wait(1)end;return x end;printd=function(y,z)if z then local A={}local function B(C,D)if A[tostring(C)]then print(D.."*"..tostring(C))else A[tostring(C)]=true;if type(C)=="table"then for E,F in pairs(C)do if type(F)=="table"then print(D.."["..E.."] => "..tostring(C).." {")B(F,D..string.rep(" ",string.len(E)+8))print(D..string.rep(" ",string.len(E)+6).."}")elseif type(F)=="string"then print(D.."["..E.."] => \""..F.."\"")else print(D.."["..E.."] => "..tostring(F))end end else print(D..tostring(C))end end end;if type(y)=="table"then print(tostring(y).." {")B(y,"  ")print("}")else developer("^1Error^0","error dumping table "..y.." why isnt a table","")end else if type(y)=="table"then print(json.encode(y,{indent=true}))else developer("^1Error^0","error dumping table "..y.." why isnt a table","")end end end;local G=string.gsub;string.multigsub=function(string,table,H)if type(table)then for I=1,#table do string=G(string,table[I],H[I])end else for I=1,#table do string=G(string,table[I],H)end end;return string end;table.fexist=function(y,J)y=y[J]if not y then return false else return true end end;local K=table.remove;table.remove=function(y,L,M)if type(L)=="number"then return K(y,L)elseif type(L)=="string"then for N,O in pairs(y)do if N==L then y[N]=nil;if M then return N end end end end end;table.empty=function(y)return next(y)==nil end;table.clone=function(y)y.metatable={__index=y}local P={}setmetatable(P,y.metatable)return P end;GetDataForJob=function(Q)return exports["utility_lib"]:GetDataForJob(Q)end;local R={}UtilityNet={}UtilityNet.CreateEntity=function(S,T,U)local V=exports["utility_lib"]:CreateEntity(S,T,U)table.insert(R,V)return V end;UtilityNet.DeleteEntity=function(W)for N,O in pairs(R)do if O==W then table.remove(R,N)break end end;return exports["utility_lib"]:DeleteEntity(W)end;UtilityNet.SetModelRenderDistance=function(S,X)return exports["utility_lib"]:SetModelRenderDistance(S,X)end;UtilityNet.State=function(V)local Y=setmetatable({},{__index=function(Z,N)local _="EntityState_"..V.."_"..N;return GlobalState[_]end,__newindex=function(Z,N,O)local _="EntityState_"..V.."_"..N;exports["utility_lib"]:EnsureStateKey(V,N)GlobalState[_]=O end})return Y end;AddEventHandler("onResourceStop",function(a0)if a0==GetCurrentResourceName()then for N,O in pairs(R)do exports["utility_lib"]:DeleteEntity(O)end end end)